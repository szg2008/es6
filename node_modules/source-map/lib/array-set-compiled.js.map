{"version":3,"sources":["array-set.js"],"names":[],"mappings":";;AAAA;AACA;;;;;;AAMA,IAAI,OAAO,QAAQ,QAAR,CAAX;AACA,IAAI,MAAM,OAAO,SAAP,CAAiB,cAA3B;;AAEA;;;;;;AAMA,SAAS,QAAT,GAAoB;AAClB,OAAK,MAAL,GAAc,EAAd;AACA,OAAK,IAAL,GAAY,OAAO,MAAP,CAAc,IAAd,CAAZ;AACD;;AAED;;;AAGA,SAAS,SAAT,GAAqB,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,gBAApC,EAAsD;AACzE,MAAI,MAAM,IAAI,QAAJ,EAAV;AACA,OAAK,IAAI,IAAI,CAAR,EAAW,MAAM,OAAO,MAA7B,EAAqC,IAAI,GAAzC,EAA8C,GAA9C,EAAmD;AACjD,QAAI,GAAJ,CAAQ,OAAO,CAAP,CAAR,EAAmB,gBAAnB;AACD;AACD,SAAO,GAAP;AACD,CAND;;AAQA;;;;;;AAMA,SAAS,SAAT,CAAmB,IAAnB,GAA0B,SAAS,aAAT,GAAyB;AACjD,SAAO,OAAO,mBAAP,CAA2B,KAAK,IAAhC,EAAsC,MAA7C;AACD,CAFD;;AAIA;;;;;AAKA,SAAS,SAAT,CAAmB,GAAnB,GAAyB,SAAS,YAAT,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;AACrE,MAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAX;AACA,MAAI,cAAc,IAAI,IAAJ,CAAS,KAAK,IAAd,EAAoB,IAApB,CAAlB;AACA,MAAI,MAAM,KAAK,MAAL,CAAY,MAAtB;AACA,MAAI,CAAC,WAAD,IAAgB,gBAApB,EAAsC;AACpC,SAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD;AACD,MAAI,CAAC,WAAL,EAAkB;AAChB,SAAK,IAAL,CAAU,IAAV,IAAkB,GAAlB;AACD;AACF,CAVD;;AAYA;;;;;AAKA,SAAS,SAAT,CAAmB,GAAnB,GAAyB,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACnD,MAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAX;AACA,SAAO,IAAI,IAAJ,CAAS,KAAK,IAAd,EAAoB,IAApB,CAAP;AACD,CAHD;;AAKA;;;;;AAKA,SAAS,SAAT,CAAmB,OAAnB,GAA6B,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC3D,MAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAX;AACA,MAAI,IAAI,IAAJ,CAAS,KAAK,IAAd,EAAoB,IAApB,CAAJ,EAA+B;AAC7B,WAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AACD;AACD,QAAM,IAAI,KAAJ,CAAU,MAAM,IAAN,GAAa,sBAAvB,CAAN;AACD,CAND;;AAQA;;;;;AAKA,SAAS,SAAT,CAAmB,EAAnB,GAAwB,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACjD,MAAI,QAAQ,CAAR,IAAa,OAAO,KAAK,MAAL,CAAY,MAApC,EAA4C;AAC1C,WAAO,KAAK,MAAL,CAAY,IAAZ,CAAP;AACD;AACD,QAAM,IAAI,KAAJ,CAAU,2BAA2B,IAArC,CAAN;AACD,CALD;;AAOA;;;;;AAKA,SAAS,SAAT,CAAmB,OAAnB,GAA6B,SAAS,gBAAT,GAA4B;AACvD,SAAO,KAAK,MAAL,CAAY,KAAZ,EAAP;AACD,CAFD;;AAIA,QAAQ,QAAR,GAAmB,QAAnB","file":"array-set-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = util.toSetString(aStr);\n  var isDuplicate = has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    this._set[sStr] = idx;\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  var sStr = util.toSetString(aStr);\n  return has.call(this._set, sStr);\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  var sStr = util.toSetString(aStr);\n  if (has.call(this._set, sStr)) {\n    return this._set[sStr];\n  }\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n"]}