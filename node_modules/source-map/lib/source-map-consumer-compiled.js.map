{"version":3,"sources":["source-map-consumer.js"],"names":[],"mappings":"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","file":"source-map-consumer-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n"]}