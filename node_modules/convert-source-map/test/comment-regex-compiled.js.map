{"version":3,"sources":["comment-regex.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,IAAI,OAAO,QAAQ,KAAR,EAAe,IAA1B;AAAA,IACI,YAAY,QAAQ,mBAAR,CADhB;AAAA,IAEI,KAAK,QAAQ,IAAR,EAAc,YAFvB;AAAA,IAGI,YAAY,QAAQ,IAAR,EAAc,mBAH9B;;AAKA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,MAAzB,EAAiC;AAC/B,KAAG,SAAH,GAAe,CAAf;AACA,SAAO,GAAG,IAAH,CAAQ,SAAS,4QAAT,GAAwR,MAAhS,CAAP;AACD;;AAED,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,QAAM,OAAO,GAAb;AACA,KAAG,SAAH,GAAe,CAAf;AACA,SAAO,GAAG,IAAH,CAAQ,SAAS,gDAAT,GAA4D,GAA5D,GAAiE,2OAAjE,GAA+S,MAAvT,CAAP;AACD;;AAED;AACA,KAAK,4BAAL,EAAmC,UAAU,CAAV,EAAa;AAC9C,GACE,MADF,EAEE,QAFF,EAEY;AACV,UAHF,EAGY;AACV,QAJF,EAIY;AACV,QALF,EAKY;AACV,UANF,EAMY;AACV,UAPF,EAOY;AACV,QARF,EASE,OATF,CASU,UAAU,CAAV,EAAa;AACrB,MAAE,EAAF,CAAK,QAAQ,CAAR,EAAW,EAAX,CAAL,EAAqB,aAAa,CAAlC;AACA,MAAE,EAAF,CAAK,mBAAmB,CAAnB,EAAsB,EAAtB,CAAL,EAAgC,aAAa,CAAb,GAAiB,eAAjD;AACA,MAAE,EAAF,CAAK,mBAAmB,CAAnB,EAAsB,EAAtB,EAA0B,GAA1B,CAAL,EAAqC,aAAa,CAAb,GAAiB,eAAtD;AACD,GAbD;;AAeA,GACE,QADF,EAEE,QAFF,EAGE,OAHF,CAGU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,CAAC,QAAQ,CAAR,EAAW,EAAX,CAAN,EAAsB,sBAAsB,CAA5C;AAAgD,GAHzE;;AAKA,IAAE,GAAF;AACD,CAtBD;;AAwBA,KAAK,4BAAL,EAAmC,UAAU,CAAV,EAAa;AAC9C,GACE,QADF,EACY;AACV,UAFF,EAEY;AACV,QAHF,EAGY;AACV,QAJF,EAIY;AACV,UALF,EAKY;AACV,UANF,EAMY;AACV,QAPF,EAQE,OARF,CAQU,UAAU,CAAV,EAAa;AACrB,MAAE,EAAF,CAAK,QAAQ,CAAR,EAAW,EAAX,CAAL,EAAqB,aAAa,CAAlC;AACA,MAAE,EAAF,CAAK,mBAAmB,CAAnB,EAAsB,EAAtB,CAAL,EAAgC,aAAa,CAAb,GAAiB,eAAjD;AACA,MAAE,EAAF,CAAK,mBAAmB,CAAnB,EAAsB,EAAtB,EAA0B,GAA1B,CAAL,EAAqC,aAAa,CAAb,GAAiB,eAAtD;AACD,GAZD;;AAcA,GACE,QADF,EAEE,QAFF,EAGE,OAHF,CAGU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,CAAC,QAAQ,CAAR,EAAW,EAAX,CAAN,EAAsB,sBAAsB,CAA5C;AAAgD,GAHzE;;AAKA,IAAE,GAAF;AACD,CArBD;;AAuBA,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,EAAhC,EAAoC;AAClC,YAAU,SAAV,GAAsB,CAAtB;AACA,SAAO,UAAU,IAAV,CAAe,KAAK,6BAAL,GAAqC,EAApD,CAAP;AACD;;AAED,KAAK,mCAAL,EAA0C,UAAU,CAAV,EAAa;;AAErD,GACE,CAAC,MAAD,EAAS,EAAT,CADF,EAEE,CAAC,QAAD,EAAW,EAAX,CAFF,EAEkC;AAChC,GAAC,QAAD,EAAW,EAAX,CAHF,EAGkC;AAChC,GAAC,OAAD,EAAU,EAAV,CAJF,EAIkC;AAChC,GAAC,OAAD,EAAU,EAAV,CALF,EAKkC;AAChC,GAAC,YAAD,EAAe,EAAf,CANF,EAOE,OAPF,CAOU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAL,EAAqC,aAAa,EAAE,IAAF,CAAO,MAAP,CAAlD;AAAmE,GAP5F;;AASA,GACE,CAAC,QAAD,EAAW,EAAX,CADF,EAEE,CAAC,gBAAD,EAAmB,GAAnB,CAFF,EAEkC;AAChC,GAAC,iBAAD,EAAoB,IAApB,CAHF,EAGkC;AAChC,GAAC,kBAAD,EAAqB,IAArB,CAJF,EAKE,OALF,CAKU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,CAAC,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAN,EAAsC,oBAAoB,EAAE,IAAF,CAAO,MAAP,CAA1D;AAA2E,GALpG;AAMA,IAAE,GAAF;AACD,CAlBD;;AAoBA,KAAK,mCAAL,EAA0C,UAAU,CAAV,EAAa;AACrD,GACE,CAAC,MAAD,EAAS,EAAT,CADF,EAEE,CAAC,QAAD,EAAW,EAAX,CAFF,EAEkC;AAChC,GAAC,QAAD,EAAW,EAAX,CAHF,EAGkC;AAChC,GAAC,OAAD,EAAU,EAAV,CAJF,EAIkC;AAChC,GAAC,OAAD,EAAU,EAAV,CALF,EAKkC;AAChC,GAAC,YAAD,EAAe,EAAf,CANF,EAOE,OAPF,CAOU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAL,EAAqC,aAAa,EAAE,IAAF,CAAO,MAAP,CAAlD;AAAmE,GAP5F;;AASA,GACE,CAAC,QAAD,EAAW,EAAX,CADF,EAEE,CAAC,gBAAD,EAAmB,GAAnB,CAFF,EAEkC;AAChC,GAAC,iBAAD,EAAoB,IAApB,CAHF,EAGkC;AAChC,GAAC,kBAAD,EAAqB,IAArB,CAJF,EAKE,OALF,CAKU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,CAAC,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAN,EAAsC,oBAAoB,EAAE,IAAF,CAAO,MAAP,CAA1D;AAA2E,GALpG;AAMA,IAAE,GAAF;AACD,CAjBD;;AAmBA,KAAK,yCAAL,EAAgD,UAAU,CAAV,EAAa;AAC3D,GAAE,CAAE,MAAF,EAAU,IAAV,CAAF,EACE,CAAC,QAAD,EAAW,OAAX,CADF,CACkC;AADlC,IAEE,CAAE,QAAF,EAAY,UAAZ,CAFF,CAEkC;AAFlC,IAGE,CAAE,oBAAF,EAAwB,IAAxB,CAHF,CAGkC;AAHlC,IAIE,CAAE,MAAF,EAAU,UAAV,CAJF,CAIkC;AAJlC,IAKE,OALF,CAKU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAL,EAAqC,aAAa,EAAE,IAAF,CAAO,MAAP,CAAlD;AAAmE,GAL5F;;AAOA,GAAE,CAAC,MAAD,EAAS,SAAT,CAAF,EAA8B;AAC5B,GAAC,MAAD,EAAS,gBAAT,CADF,CAC8B;AAD9B,IAEE,OAFF,CAEU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,CAAC,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAN,EAAsC,oBAAoB,EAAE,IAAF,CAAO,MAAP,CAA1D;AAA2E,GAFpG;AAGA,IAAE,GAAF;AACD,CAZD;;AAcA,KAAK,yCAAL,EAAgD,UAAU,CAAV,EAAa;AAC3D,GAAE,CAAE,MAAF,EAAU,IAAV,CAAF,EACE,CAAC,QAAD,EAAW,OAAX,CADF,CACkC;AADlC,IAEE,CAAE,QAAF,EAAY,UAAZ,CAFF,CAEkC;AAFlC,IAGE,CAAE,oBAAF,EAAwB,IAAxB,CAHF,CAGkC;AAHlC,IAIE,CAAE,MAAF,EAAU,UAAV,CAJF,CAIkC;AAJlC,IAKE,OALF,CAKU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAL,EAAqC,aAAa,EAAE,IAAF,CAAO,MAAP,CAAlD;AAAmE,GAL5F;;AAOA,GAAE,CAAC,MAAD,EAAS,SAAT,CAAF,EAA8B;AAC5B,GAAC,MAAD,EAAS,gBAAT,CADF,CAC8B;AAD9B,IAEE,OAFF,CAEU,UAAU,CAAV,EAAa;AAAE,MAAE,EAAF,CAAK,CAAC,mBAAmB,EAAE,CAAF,CAAnB,EAAyB,EAAE,CAAF,CAAzB,CAAN,EAAsC,oBAAoB,EAAE,IAAF,CAAO,MAAP,CAA1D;AAA2E,GAFpG;AAGA,IAAE,GAAF;AACD,CAZD","file":"comment-regex-compiled.js","sourcesContent":["'use strict';\n/*jshint asi: true */\n\nvar test = require('tap').test\n  , generator = require('inline-source-map')\n  , rx = require('..').commentRegex\n  , mapFileRx = require('..').mapFileCommentRegex\n\nfunction comment(prefix, suffix) {\n  rx.lastIndex = 0;\n  return rx.test(prefix + 'sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmdW5jdGlvbiBmb28oKSB7XG4gY29uc29sZS5sb2coXCJoZWxsbyBJIGFtIGZvb1wiKTtcbiBjb25zb2xlLmxvZyhcIndobyBhcmUgeW91XCIpO1xufVxuXG5mb28oKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSJ9' + suffix)\n}\n\nfunction commentWithCharSet(prefix, suffix, sep) {\n  sep = sep || ':';\n  rx.lastIndex = 0;\n  return rx.test(prefix + 'sourceMappingURL=data:application/json;charset' + sep +'utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmdW5jdGlvbiBmb28oKSB7XG4gY29uc29sZS5sb2coXCJoZWxsbyBJIGFtIGZvb1wiKTtcbiBjb25zb2xlLmxvZyhcIndobyBhcmUgeW91XCIpO1xufVxuXG5mb28oKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSJ9' + suffix)\n}\n\n// Source Map v2 Tests\ntest('comment regex old spec - @', function (t) {\n  [ \n    '//@ ',\n    '  //@ ', // with leading space\n    '\\t//@ ', // with leading tab\n    '//@ ',   // with leading text\n    '/*@ ',   // multi line style\n    '  /*@ ', // multi line style with leading spaces\n    '\\t/*@ ', // multi line style with leading tab\n    '/*@ ',   // multi line style with leading text\n  ].forEach(function (x) { \n    t.ok(comment(x, ''), 'matches ' + x) \n    t.ok(commentWithCharSet(x, ''), 'matches ' + x + ' with charset') \n    t.ok(commentWithCharSet(x, '', '='), 'matches ' + x + ' with charset')\n  });\n\n  [\n    ' @// @',\n    ' @/* @',\n  ].forEach(function (x) { t.ok(!comment(x, ''), 'should not match ' + x) })\n\n  t.end()\n})\n\ntest('comment regex new spec - #', function (t) {\n  [ \n    '  //# ', // with leading spaces\n    '\\t//# ', // with leading tab\n    '//# ',   // with leading text\n    '/*# ',   // multi line style\n    '  /*# ', // multi line style with leading spaces\n    '\\t/*# ', // multi line style with leading tab\n    '/*# ',   // multi line style with leading text\n  ].forEach(function (x) { \n    t.ok(comment(x, ''), 'matches ' + x) \n    t.ok(commentWithCharSet(x, ''), 'matches ' + x + ' with charset') \n    t.ok(commentWithCharSet(x, '', '='), 'matches ' + x + ' with charset')\n  });\n  \n  [ \n    ' #// #',\n    ' #/* #',\n  ].forEach(function (x) { t.ok(!comment(x, ''), 'should not match ' + x) })\n\n  t.end()\n})\n\nfunction mapFileCommentWrap(s1, s2) {\n  mapFileRx.lastIndex = 0;\n  return mapFileRx.test(s1 + 'sourceMappingURL=foo.js.map' + s2)\n}\n\ntest('mapFileComment regex old spec - @', function (t) {\n\n  [ \n    ['//@ ', ''],\n    ['  //@ ', ''],                 // with leading spaces\n    ['\\t//@ ', ''],                 // with a leading tab\n    ['///@ ', ''],                  // with a leading text\n    [';//@ ', ''],                  // with a leading text\n    ['return//@ ', ''],             // with a leading text\n  ].forEach(function (x) { t.ok(mapFileCommentWrap(x[0], x[1]), 'matches ' + x.join(' :: ')) });\n\n  [ \n    [' @// @', ''],\n    ['var sm = \"//@ ', '\"'],        // not inside a string\n    ['var sm = \\'//@ ', '\\''],      // not inside a string\n    ['var sm = \\' //@ ', '\\''],     // not inside a string\n  ].forEach(function (x) { t.ok(!mapFileCommentWrap(x[0], x[1]), 'does not match ' + x.join(' :: ')) })\n  t.end()\n})\n\ntest('mapFileComment regex new spec - #', function (t) {\n  [ \n    ['//# ', ''],\n    ['  //# ', ''],                 // with leading space\n    ['\\t//# ', ''],                 // with leading tab\n    ['///# ', ''],                  // with leading text\n    [';//# ', ''],                  // with leading text\n    ['return//# ', ''],             // with leading text\n  ].forEach(function (x) { t.ok(mapFileCommentWrap(x[0], x[1]), 'matches ' + x.join(' :: ')) });\n\n  [ \n    [' #// #', ''],\n    ['var sm = \"//# ', '\"'],        // not inside a string\n    ['var sm = \\'//# ', '\\''],      // not inside a string\n    ['var sm = \\' //# ', '\\''],     // not inside a string\n  ].forEach(function (x) { t.ok(!mapFileCommentWrap(x[0], x[1]), 'does not match ' + x.join(' :: ')) })\n  t.end()\n})\n\ntest('mapFileComment regex /* */ old spec - @', function (t) {\n  [ [ '/*@ ', '*/' ]\n  , ['  /*@ ', '  */ ' ]            // with leading spaces\n  , [ '\\t/*@ ', ' \\t*/\\t ']         // with a leading tab\n  , [ 'leading string/*@ ', '*/' ]  // with a leading string\n  , [ '/*@ ', ' \\t*/\\t ']           // with trailing whitespace\n  ].forEach(function (x) { t.ok(mapFileCommentWrap(x[0], x[1]), 'matches ' + x.join(' :: ')) });\n\n  [ ['/*@ ', ' */ */ ' ],       // not the last thing on its line \n    ['/*@ ', ' */ more text ' ] // not the last thing on its line \n  ].forEach(function (x) { t.ok(!mapFileCommentWrap(x[0], x[1]), 'does not match ' + x.join(' :: ')) });\n  t.end()\n})\n\ntest('mapFileComment regex /* */ new spec - #', function (t) {\n  [ [ '/*# ', '*/' ]\n  , ['  /*# ', '  */ ' ]            // with leading spaces\n  , [ '\\t/*# ', ' \\t*/\\t ']         // with a leading tab\n  , [ 'leading string/*# ', '*/' ]  // with a leading string\n  , [ '/*# ', ' \\t*/\\t ']           // with trailing whitespace\n  ].forEach(function (x) { t.ok(mapFileCommentWrap(x[0], x[1]), 'matches ' + x.join(' :: ')) });\n\n  [ ['/*# ', ' */ */ ' ],       // not the last thing on its line \n    ['/*# ', ' */ more text ' ] // not the last thing on its line \n  ].forEach(function (x) { t.ok(!mapFileCommentWrap(x[0], x[1]), 'does not match ' + x.join(' :: ')) });\n  t.end()\n})\n"]}