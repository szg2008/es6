{"version":3,"sources":["base.js"],"names":[],"mappings":"AAAA;;AAEA,QAAQ,UAAR,GAAqB,IAArB;AACA,QAAQ,IAAR,GAAe,IAAf;AACA,QAAQ,OAAR,GAAkB,OAAlB;AACA,QAAQ,cAAR,GAAyB,cAAzB;AACA,QAAQ,IAAR,GAAe,IAAf;AACA,QAAQ,SAAR,GAAoB,SAApB;;AAEA,IAAI,SAAS,QAAQ,SAAR,CAAb;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,kBAA/B,EAAmD;AACjD,cAAY,IADqC;AAEjD,OAAK,SAAS,GAAT,GAAe;AAClB,WAAO,OAAO,aAAd;AACD;AAJgD,CAAnD;AAMA,SAAS,IAAT,CAAc,IAAd,EAAoB;AAClB,OAAK,KAAL,CAAW,KAAK,OAAhB,EAAyB,IAAzB;AACD;;AAED,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AACrB,OAAK,kBAAL,CAAwB,IAAxB,EAA8B,KAA9B;;AAEA,OAAK,aAAL,CAAmB,KAAK,UAAxB,EAAoC,IAApC;AACA,MAAI,KAAK,UAAL,IAAmB,KAAK,UAAL,CAAgB,MAAvC,EAA+C,KAAK,OAAL;;AAE/C,OAAK,aAAL,CAAmB,KAAK,IAAxB,EAA8B,IAA9B;AACD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC5B,OAAK,KAAL,CAAW,GAAX;AACA,OAAK,kBAAL,CAAwB,IAAxB;AACA,MAAI,KAAK,IAAL,CAAU,MAAd,EAAsB;AACpB,SAAK,OAAL;;AAEA,SAAK,aAAL,CAAmB,KAAK,UAAxB,EAAoC,IAApC,EAA0C,EAAE,QAAQ,IAAV,EAA1C;AACA,QAAI,KAAK,UAAL,IAAmB,KAAK,UAAL,CAAgB,MAAvC,EAA+C,KAAK,OAAL;;AAE/C,SAAK,aAAL,CAAmB,KAAK,IAAxB,EAA8B,IAA9B,EAAoC,EAAE,QAAQ,IAAV,EAApC;AACA,SAAK,qBAAL;;AAEA,SAAK,MAAL,CAAY,KAAZ,EAAmB,KAAK,GAAxB;;AAEA,QAAI,CAAC,KAAK,QAAL,CAAc,IAAd,CAAL,EAA0B,KAAK,OAAL;;AAE1B,SAAK,UAAL;AACD,GAdD,MAcO;AACL,SAAK,MAAL,CAAY,KAAZ,EAAmB,KAAK,GAAxB;AACA,SAAK,KAAL,CAAW,GAAX;AACD;AACF;;AAED,SAAS,IAAT,GAAgB,CAAE;;AAElB,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AACvB,OAAK,KAAL,CAAW,KAAK,KAAhB,EAAuB,IAAvB;AACA,OAAK,SAAL;AACD","file":"base-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.File = File;\nexports.Program = Program;\nexports.BlockStatement = BlockStatement;\nexports.Noop = Noop;\nexports.Directive = Directive;\n\nvar _types = require(\"./types\");\n\nObject.defineProperty(exports, \"DirectiveLiteral\", {\n  enumerable: true,\n  get: function get() {\n    return _types.StringLiteral;\n  }\n});\nfunction File(node) {\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  this.token(\"{\");\n  this.printInnerComments(node);\n  if (node.body.length) {\n    this.newline();\n\n    this.printSequence(node.directives, node, { indent: true });\n    if (node.directives && node.directives.length) this.newline();\n\n    this.printSequence(node.body, node, { indent: true });\n    this.removeTrailingNewline();\n\n    this.source(\"end\", node.loc);\n\n    if (!this.endsWith(\"\\n\")) this.newline();\n\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.token(\"}\");\n  }\n}\n\nfunction Noop() {}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}"]}